# -*- coding: utf-8 -*-
"""dashboard_rh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xWK03gobbki1Q5ZVyDxl-HuRpuXU4NjP
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import pickle
import joblib
import gdown
import os

# --- CONFIGURA칂츾O DA P츼GINA ---
st.set_page_config(
    page_title="Dashboard de Attrition RH",
    page_icon="游늵",
    layout="wide"
)

# --- FUN칂칏ES DE CACHE ---
@st.cache_resource
def load_model():
    # ... (c칩digo para carregar o modelo .pkl ou .joblib)
    pkl_path = 'modelo_attrition_pipeline.pkl'
    joblib_path = 'modelo_attrition_pipeline.joblib'
    if os.path.exists(pkl_path):
        st.info("Carregando modelo a partir do arquivo .pkl (pickle)...")
        with open(pkl_path, 'rb') as file:
            pipeline = pickle.load(file)
        return pipeline
    elif os.path.exists(joblib_path):
        st.info("Carregando modelo a partir do arquivo .joblib...")
        pipeline = joblib.load(joblib_path)
        return pipeline
    else:
        st.error("Erro: Nenhum arquivo de modelo encontrado.")
        return None

@st.cache_data
def load_and_process_data():
    # ... (c칩digo para carregar e processar os dados)
    try:
        file_id = '19TLmSdRihbLN3h_TKNPmR68GdCcp_Hc9'
        url = f'https://drive.google.com/uc?export=download&id={file_id}'
        df = pd.read_csv(url, sep=';')
        df['admission_date'] = pd.to_datetime(df['admission_date'], dayfirst=True)
        df['resignation_date'] = pd.to_datetime(df['resignation_date'], dayfirst=True)
        today_reference = max(df['admission_date'].max(), df['resignation_date'].max())
        df['tenure_in_days'] = (df['resignation_date'].fillna(today_reference) - df['admission_date']).dt.days
        df.dropna(subset=['tenure_in_days'], inplace=True)
        df = df[df['tenure_in_days'] >= 0]
        df['Attrition_numeric'] = df['Attrition'].apply(lambda x: 1 if x == 'Yes' else 0)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar ou processar os dados: {e}")
        return None

# --- CARREGAMENTO DOS DADOS E MODELO ---
model_pipeline = load_model()
df_rh = load_and_process_data()

if model_pipeline is not None and df_rh is not None:
    # --- SIDEBAR DE FILTROS ---
    st.sidebar.header("Filtros Interativos")
    departments = st.sidebar.multiselect("Selecione o Departamento:", options=df_rh["Department"].unique(), default=df_rh["Department"].unique())
    job_roles = st.sidebar.multiselect("Selecione o Cargo:", options=df_rh["JobRole"].unique(), default=df_rh["JobRole"].unique())
    genders = st.sidebar.multiselect("Selecione o G칡nero:", options=df_rh["Gender"].unique(), default=df_rh["Gender"].unique())

    df_selection = df_rh.query("Department == @departments & JobRole == @job_roles & Gender == @genders")

    # --- T칈TULO E KPIs ---
    st.title("游늵 Dashboard de An치lise de Attrition (Turnover)")
    st.markdown("Utilize os filtros na barra lateral para explorar os dados.")
    total_employees = df_selection.shape[0]
    total_attrition = df_selection["Attrition_numeric"].sum()
    attrition_rate = (total_attrition / total_employees) * 100 if total_employees > 0 else 0
    avg_tenure_years = (df_selection["tenure_in_days"].mean() / 365) if total_employees > 0 else 0
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(label="Total de Colaboradores", value=f"{total_employees}")
    with col2:
        st.metric(label="Taxa de Attrition", value=f"{attrition_rate:.2f}%")
    with col3:
        st.metric(label="Tempo M칠dio de Casa (Anos)", value=f"{avg_tenure_years:.1f}")

    st.markdown("---")

    # --- SE칂츾O DE GR츼FICOS ---
    # --- In칤cio da Modifica칞칚o ---
    st.subheader("An치lise Visual da Rotatividade")

    # Criando duas colunas para os gr치ficos
    graph_col1, graph_col2 = st.columns(2)

    with graph_col1:
        # Gr치fico 1: Attrition por Departamento
        st.markdown("##### Taxa de Attrition (%) por Departamento")
        fig_dept = px.bar(
            df_selection.groupby('Department')['Attrition_numeric'].mean().mul(100).reset_index().sort_values('Attrition_numeric', ascending=False),
            x='Department',
            y='Attrition_numeric',
            text_auto='.2f',
            labels={'Department': 'Departamento', 'Attrition_numeric': 'Taxa de Attrition (%)'}
        )
        st.plotly_chart(fig_dept, use_container_width=True)

        # Gr치fico 3 (NOVO): Contagem de Attrition por Horas Extras
        st.markdown("##### Contagem de Attrition por Horas Extras")
        fig_overtime = px.bar(
            df_selection.groupby(['OverTime', 'Attrition']).size().reset_index(name='count'),
            x='OverTime',
            y='count',
            color='Attrition',
            barmode='group',
            text_auto=True,
            labels={'OverTime': 'Horas Extras', 'count': 'N칰mero de Colaboradores', 'Attrition': 'Attrition'}
        )
        st.plotly_chart(fig_overtime, use_container_width=True)


    with graph_col2:
        # Gr치fico 2: Attrition por Faixa Salarial
        st.markdown("##### Distribui칞칚o Salarial vs. Attrition")
        fig_income = px.box(
            df_selection,
            x='Attrition',
            y='MonthlyIncome',
            color='Attrition',
            labels={'MonthlyIncome': 'Sal치rio Mensal ($)', 'Attrition': 'Attrition'}
        )
        st.plotly_chart(fig_income, use_container_width=True)

        # Gr치fico 4 (NOVO): Taxa de Attrition por Cargo
        st.markdown("##### Taxa de Attrition (%) por Cargo")
        attrition_by_role = df_selection.groupby('JobRole')['Attrition_numeric'].mean().mul(100).reset_index().sort_values('Attrition_numeric', ascending=True)
        fig_role = px.bar(
            attrition_by_role.tail(10), # Mostrando os 10 maiores
            y='JobRole',
            x='Attrition_numeric',
            orientation='h',
            text_auto='.2f',
            labels={'JobRole': 'Cargo', 'Attrition_numeric': 'Taxa de Attrition (%)'}
        )
        st.plotly_chart(fig_role, use_container_width=True)

    # --- Fim da Modifica칞칚o ---

    # --- SE칂츾O DE PREVIS츾O ---
    st.markdown("---")
    st.subheader("游댩 Ferramenta de Previs칚o de Attrition")
    # ... (o c칩digo da ferramenta de previs칚o continua igual)